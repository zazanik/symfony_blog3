<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Category;
use AppBundle\Entity\Post;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get posts by same post category
     *
     * @param $category array
     * @param $limit integer
     * @return array
     */
    public function getSameCategoryPosts($category, $limit)
    {

        $i = 0;
        foreach ($category as $cat){
            $categoryList[$i] = $cat->getId();
            $i++;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('p')
            ->from('AppBundle:Post', 'p')
            ->leftJoin('p.category', 'c')
            ->where("c.id = ?{$categoryList[0]}")
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;

        return $query;
    }

    public function getLastPosts($limit = 10)
    {
        $query = $this->createQueryBuilder('p')
            ->setMaxResults($limit)
            ->orderBy('p.updated', 'DESC')
            ->getQuery()
            ->getResult();

        return $query;
    }

    /**
     * Get post with limit
     *
     * @param int $currentPage
     * @param int $limit
     * @return Paginator
     */
    public function getAllPosts($currentPage = 1, $limit = 10)
    {
        $query = $this->createQueryBuilder('p')
            ->orderBy('p.updated', 'DESC')
            ->getQuery()
        ;

        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }

    /**
     * @param $dql
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    public function paginate($dql, $page = 1, $limit = 10)
    {

        if ($page === null || $page === '') {
            $page = 1;
        }

        $paginator = new Paginator($dql, $fetchJoinCollection = true);

        $paginator->getQuery()
            ->setFirstResult($limit * ($page - 1))
            ->setMaxResults($limit)
        ;

        return $paginator;
    }

}
